// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var $$Text = require("../Text/Text.bs.js");
var CssJs = require("bs-css-emotion/src/CssJs.bs.js");
var Curry = require("rescript/lib/js/curry.js");
var Theme = require("../../lib/Theme/Theme.bs.js");
var React = require("react");
var Button = require("../Button/Button.bs.js");
var Render = require("../../lib/Render/Render.bs.js");
var NextIntl = require("../../bindings/NextIntl/NextIntl.bs.js");
var SinglePost = require("../SinglePost/SinglePost.bs.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var AddPostModal = require("../AddPostModal/AddPostModal.bs.js");
var Posts_Styles = require("./Posts_Styles.bs.js");
var RescriptRelay = require("rescript-relay/src/RescriptRelay.bs.js");
var RelayRuntime = require("relay-runtime");
var Hooks = require("react-relay/hooks");
var PostsQuery_graphql = require("../../__generated__/rescript-relay/PostsQuery_graphql.bs.js");
var RescriptRelay_Internal = require("rescript-relay/src/RescriptRelay_Internal.bs.js");

function use(variables, fetchPolicy, fetchKey, networkCacheConfig, param) {
  var data = Hooks.useLazyLoadQuery(PostsQuery_graphql.node, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(PostsQuery_graphql.Internal.convertVariables(variables)), {
        fetchKey: fetchKey,
        fetchPolicy: RescriptRelay.mapFetchPolicy(fetchPolicy),
        networkCacheConfig: networkCacheConfig
      });
  return RescriptRelay_Internal.internal_useConvertedValue(PostsQuery_graphql.Internal.convertResponse, data);
}

function useLoader(param) {
  var match = Hooks.useQueryLoader(PostsQuery_graphql.node);
  var loadQueryFn = match[1];
  var loadQuery = React.useMemo((function () {
          return function (param, param$1, param$2, param$3) {
            return Curry._2(loadQueryFn, PostsQuery_graphql.Internal.convertVariables(param), {
                        fetchPolicy: param$1,
                        networkCacheConfig: param$2
                      });
          };
        }), [loadQueryFn]);
  return [
          Caml_option.nullable_to_opt(match[0]),
          loadQuery,
          match[2]
        ];
}

function $$fetch(environment, variables, onResult, networkCacheConfig, fetchPolicy, param) {
  Hooks.fetchQuery(environment, PostsQuery_graphql.node, PostsQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).subscribe({
        next: (function (res) {
            return Curry._1(onResult, {
                        TAG: /* Ok */0,
                        _0: PostsQuery_graphql.Internal.convertResponse(res)
                      });
          }),
        error: (function (err) {
            return Curry._1(onResult, {
                        TAG: /* Error */1,
                        _0: err
                      });
          })
      });
  
}

function fetchPromised(environment, variables, networkCacheConfig, fetchPolicy, param) {
  var __x = Hooks.fetchQuery(environment, PostsQuery_graphql.node, PostsQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).toPromise();
  return __x.then(function (res) {
              return Promise.resolve(PostsQuery_graphql.Internal.convertResponse(res));
            });
}

function usePreloaded(queryRef, param) {
  var data = Hooks.usePreloadedQuery(PostsQuery_graphql.node, queryRef);
  return RescriptRelay_Internal.internal_useConvertedValue(PostsQuery_graphql.Internal.convertResponse, data);
}

function retain(environment, variables) {
  var operationDescriptor = RelayRuntime.createOperationDescriptor(PostsQuery_graphql.node, PostsQuery_graphql.Internal.convertVariables(variables));
  return environment.retain(operationDescriptor);
}

var Query = {
  Types: undefined,
  use: use,
  useLoader: useLoader,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  usePreloaded: usePreloaded,
  retain: retain
};

var deleteProp = ((newProps, key) => delete newProps[key]);

function getOrEmpty(str) {
  if (str !== undefined) {
    return " " + str;
  } else {
    return "";
  }
}

var styles = CssJs.style([
      CssJs.label("PostsWrapper"),
      CssJs.padding(Theme.Size.md)
    ]);

function make(props) {
  var className = styles + getOrEmpty(Caml_option.undefined_to_opt(props.className));
  var stylesObject = {
    className: className,
    ref: Caml_option.undefined_to_opt(props.innerRef)
  };
  var newProps = Object.assign({}, props, stylesObject);
  deleteProp(newProps, "innerRef");
  return React.createElement("div", newProps);
}

var PostsWrapper = {
  deleteProp: deleteProp,
  getOrEmpty: getOrEmpty,
  styles: styles,
  make: make
};

function Posts$Content(Props) {
  var queryRef = Props.queryRef;
  var refetch = Props.refetch;
  var data = usePreloaded(queryRef, undefined);
  var t = NextIntl.useTranslations(undefined);
  var match = React.useState(function () {
        return false;
      });
  var setIsModalOpen = match[1];
  var toggleModal = function (param) {
    return Curry._1(setIsModalOpen, (function (isOpen) {
                  return !isOpen;
                }));
  };
  return React.createElement("div", undefined, React.createElement(Posts_Styles.Header.make, {
                  children: null
                }, React.createElement($$Text.Title.make, {
                      children: Curry._1(t, "Posts")
                    }), React.createElement("div", undefined, React.createElement(AddPostModal.make, {
                          isOpen: match[0],
                          onClose: toggleModal,
                          onSave: (function (param) {
                              Curry._1(refetch, undefined);
                              return Curry._1(setIsModalOpen, (function (isOpen) {
                                            return !isOpen;
                                          }));
                            })
                        }), React.createElement(Button.make, {
                          children: Render.s(Curry._1(t, "Add Post")),
                          onClick: toggleModal
                        }))), React.createElement(Posts_Styles.Container.make, {
                  children: Render.mapi(data.posts, (function (thisPost, key) {
                          return React.createElement(SinglePost.make, {
                                      post: thisPost.fragmentRefs,
                                      key: key
                                    });
                        }))
                }));
}

var Content = {
  make: Posts$Content
};

function Posts(Props) {
  var match = useLoader(undefined);
  var dispose = match[2];
  var loadQuery = match[1];
  var queryRef = match[0];
  React.useEffect((function () {
          console.log("queryRef", queryRef);
          if (Belt_Option.isNone(queryRef)) {
            console.log("geting data");
            Curry._4(loadQuery, undefined, undefined, undefined, undefined);
          }
          
        }), [queryRef]);
  if (queryRef !== undefined) {
    return React.createElement(Posts$Content, {
                queryRef: Caml_option.valFromOption(queryRef),
                refetch: (function (param) {
                    console.log("refetching");
                    return Curry._1(dispose, undefined);
                  })
              });
  } else {
    return null;
  }
}

var make$1 = Posts;

exports.Query = Query;
exports.PostsWrapper = PostsWrapper;
exports.Content = Content;
exports.make = make$1;
/* styles Not a pure module */
