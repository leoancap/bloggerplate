// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var $$Text = require("../Text/Text.bs.js");
var Curry = require("rescript/lib/js/curry.js");
var Theme = require("../../lib/Theme/Theme.bs.js");
var React = require("react");
var Render = require("../../lib/Render/Render.bs.js");
var NextIntl = require("../../bindings/NextIntl/NextIntl.bs.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Css = require("@emotion/css");
var AncestorCustom = require("../../lib/Theme/AncestorCustom.bs.js");

var container = Css.css("\n    display: grid;\n    grid-gap: " + Theme.Padding.xs + ";\n    position: relative;\n  ");

var label = Css.css("\n    color: " + Theme.Colors.grayLight + ";\n    font-size: " + Theme.FontSize._sm + ";\n  ");

function input(hasError) {
  return Css.css({
              color: Theme.Colors.white,
              fontSize: Theme.FontSize.sm,
              border: hasError ? "1px solid " + Theme.Colors.danger : "none",
              padding: "1.6rem 1.6rem",
              borderRadius: "6px",
              outline: "none",
              width: "100%",
              backgroundColor: Theme.Colors.gray,
              transition: "300ms",
              "&:placeholder": {
                color: Theme.Colors.grayLight
              },
              "&:focus": {
                transition: "300ms",
                boxShadow: "0px 0px 0px 2px " + Theme.Colors.primary
              }
            });
}

var textarea = Css.css("\n      min-height: " + Curry._1(AncestorCustom.Config.Styles.Spacing.make, 10) + ";\n      max-height: " + Curry._1(AncestorCustom.Config.Styles.Spacing.make, 25) + ";\n      resize: vertical\n    ");

var error = Css.css("\n      position: absolute;\n      bottom: -" + Theme.Padding.sm + "\n    ");

var Styles = {
  container: container,
  label: label,
  input: input,
  textarea: textarea,
  error: error
};

function Input(Props) {
  var onChange = Props.onChange;
  var label$1 = Props.label;
  var placeholder = Props.placeholder;
  var value = Props.value;
  var tagOpt = Props.tag;
  var errorOpt = Props.error;
  var tag = tagOpt !== undefined ? tagOpt : "input";
  var error$1 = errorOpt !== undefined ? Caml_option.valFromOption(errorOpt) : undefined;
  var baseClass = input(Belt_Option.isSome(error$1));
  var t = NextIntl.useTranslations(undefined);
  var tmp;
  if (tag === "input") {
    var tmp$1 = {
      className: baseClass,
      label: label$1
    };
    if (placeholder !== undefined) {
      tmp$1.placeholder = Caml_option.valFromOption(placeholder);
    }
    if (value !== undefined) {
      tmp$1.value = Caml_option.valFromOption(value);
    }
    if (onChange !== undefined) {
      tmp$1.onChange = Caml_option.valFromOption(onChange);
    }
    tmp = React.createElement("input", tmp$1);
  } else {
    var tmp$2 = {
      className: baseClass + " " + textarea,
      label: label$1
    };
    if (placeholder !== undefined) {
      tmp$2.placeholder = Caml_option.valFromOption(placeholder);
    }
    if (value !== undefined) {
      tmp$2.value = Caml_option.valFromOption(value);
    }
    if (onChange !== undefined) {
      tmp$2.onChange = Caml_option.valFromOption(onChange);
    }
    tmp = React.createElement("textarea", tmp$2);
  }
  return React.createElement(AncestorCustom.Config.Box.make, {
              children: null,
              className: container
            }, React.createElement("label", {
                  className: label,
                  htmlFor: label$1
                }, Render.s(label$1)), tmp, error$1 !== undefined ? React.createElement(AncestorCustom.Config.Box.make, {
                    children: React.createElement($$Text.Small.make, {
                          children: Curry._1(t, error$1)
                        }),
                    className: error
                  }) : null);
}

var make = Input;

exports.Styles = Styles;
exports.make = make;
/* container Not a pure module */
