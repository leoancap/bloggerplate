// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var CssJs = require("bs-css-emotion/src/CssJs.bs.js");
var Theme = require("../../lib/Theme/Theme.bs.js");
var React = require("react");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Css_Js_Core = require("bs-css/src/Css_Js_Core.bs.js");

var deleteProp = ((newProps, key) => delete newProps[key]);

function getOrEmpty(str) {
  if (str !== undefined) {
    return " " + str;
  } else {
    return "";
  }
}

var styles = CssJs.style([
      CssJs.label("Container"),
      CssJs.display("grid"),
      CssJs.unsafe("gridGap", "1rem"),
      CssJs.unsafe("position", "relative")
    ]);

function make(props) {
  var className = styles + getOrEmpty(Caml_option.undefined_to_opt(props.className));
  var stylesObject = {
    className: className,
    ref: Caml_option.undefined_to_opt(props.innerRef)
  };
  var newProps = Object.assign({}, props, stylesObject);
  deleteProp(newProps, "innerRef");
  return React.createElement("div", newProps);
}

var Container = {
  deleteProp: deleteProp,
  getOrEmpty: getOrEmpty,
  styles: styles,
  make: make
};

var deleteProp$1 = ((newProps, key) => delete newProps[key]);

function getOrEmpty$1(str) {
  if (str !== undefined) {
    return " " + str;
  } else {
    return "";
  }
}

var styles$1 = CssJs.style([
      CssJs.label("Label"),
      CssJs.color(Theme.Colors.grayLight),
      CssJs.fontSize(Theme.FontSize.sm)
    ]);

function make$1(props) {
  var className = styles$1 + getOrEmpty$1(Caml_option.undefined_to_opt(props.className));
  var stylesObject = {
    className: className,
    ref: Caml_option.undefined_to_opt(props.innerRef)
  };
  var newProps = Object.assign({}, props, stylesObject);
  deleteProp$1(newProps, "innerRef");
  return React.createElement("label", newProps);
}

var Label = {
  deleteProp: deleteProp$1,
  getOrEmpty: getOrEmpty$1,
  styles: styles$1,
  make: make$1
};

function commonStyles(intent) {
  var borderStyles = intent === "danger" ? CssJs.border({
          NAME: "px",
          VAL: 1
        }, "solid", Theme.Colors.danger) : CssJs.border("zero", "none", "transparent");
  return CssJs.style([
              borderStyles,
              CssJs.color(Theme.Colors.white),
              CssJs.fontSize(Theme.FontSize.sm),
              CssJs.background(Theme.Colors.gray),
              CssJs.padding2(Theme.Padding.xs, Theme.Padding.xs),
              CssJs.borderRadius(Theme.BorderRadius.sm),
              CssJs.outline("zero", "none", "transparent"),
              CssJs.width({
                    NAME: "percent",
                    VAL: 100
                  }),
              CssJs.transitionDuration(300),
              CssJs.placeholder([CssJs.color(Theme.Colors.grayLight)]),
              CssJs.focus([
                    CssJs.transitionDuration(300),
                    CssJs.boxShadow(Css_Js_Core.Shadow.box(undefined, undefined, undefined, {
                              NAME: "px",
                              VAL: 2
                            }, undefined, Theme.Colors.primary))
                  ])
            ]);
}

var deleteProp$2 = ((newProps, key) => delete newProps[key]);

function getOrEmpty$2(str) {
  if (str !== undefined) {
    return " " + str;
  } else {
    return "";
  }
}

function styles$2(intent, param) {
  return CssJs.style([CssJs.label("InputStyled")]);
}

function make$2(props) {
  var className = styles$2(props.intent, undefined) + getOrEmpty$2(Caml_option.undefined_to_opt(props.className));
  var stylesObject = {
    className: className,
    ref: Caml_option.undefined_to_opt(props.innerRef)
  };
  var newProps = Object.assign({}, props, stylesObject);
  deleteProp$2(newProps, "intent");
  deleteProp$2(newProps, "innerRef");
  return React.createElement("input", newProps);
}

var InputStyled = {
  deleteProp: deleteProp$2,
  getOrEmpty: getOrEmpty$2,
  styles: styles$2,
  make: make$2
};

var deleteProp$3 = ((newProps, key) => delete newProps[key]);

function getOrEmpty$3(str) {
  if (str !== undefined) {
    return " " + str;
  } else {
    return "";
  }
}

function styles$3(intent, param) {
  return CssJs.style([
              CssJs.label("TextArea"),
              CssJs.resize("vertical"),
              CssJs.maxHeight({
                    NAME: "rem",
                    VAL: 25
                  }),
              CssJs.minHeight({
                    NAME: "rem",
                    VAL: 10
                  })
            ]);
}

function make$3(props) {
  var className = styles$3(props.intent, undefined) + getOrEmpty$3(Caml_option.undefined_to_opt(props.className));
  var stylesObject = {
    className: className,
    ref: Caml_option.undefined_to_opt(props.innerRef)
  };
  var newProps = Object.assign({}, props, stylesObject);
  deleteProp$3(newProps, "intent");
  deleteProp$3(newProps, "innerRef");
  return React.createElement("textarea", newProps);
}

var TextArea = {
  deleteProp: deleteProp$3,
  getOrEmpty: getOrEmpty$3,
  styles: styles$3,
  make: make$3
};

var deleteProp$4 = ((newProps, key) => delete newProps[key]);

function getOrEmpty$4(str) {
  if (str !== undefined) {
    return " " + str;
  } else {
    return "";
  }
}

var styles$4 = CssJs.style([
      CssJs.label("Error"),
      CssJs.unsafe("position", "absolute"),
      CssJs.bottom({
            NAME: "rem",
            VAL: -2
          })
    ]);

function make$4(props) {
  var className = styles$4 + getOrEmpty$4(Caml_option.undefined_to_opt(props.className));
  var stylesObject = {
    className: className,
    ref: Caml_option.undefined_to_opt(props.innerRef)
  };
  var newProps = Object.assign({}, props, stylesObject);
  deleteProp$4(newProps, "innerRef");
  return React.createElement("div", newProps);
}

var $$Error = {
  deleteProp: deleteProp$4,
  getOrEmpty: getOrEmpty$4,
  styles: styles$4,
  make: make$4
};

exports.Container = Container;
exports.Label = Label;
exports.commonStyles = commonStyles;
exports.InputStyled = InputStyled;
exports.TextArea = TextArea;
exports.$$Error = $$Error;
/* styles Not a pure module */
