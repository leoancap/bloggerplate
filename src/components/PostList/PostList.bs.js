// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var $$Text = require("../Text/Text.bs.js");
var CssJs = require("bs-css-emotion/src/CssJs.bs.js");
var Curry = require("rescript/lib/js/curry.js");
var Theme = require("../../lib/Theme/Theme.bs.js");
var React = require("react");
var Button = require("../Button/Button.bs.js");
var Render = require("../../lib/Render/Render.bs.js");
var NextIntl = require("../../bindings/NextIntl/NextIntl.bs.js");
var SinglePost = require("../SinglePost/SinglePost.bs.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var AddPostModal = require("../AddPostModal/AddPostModal.bs.js");
var PostList_Styles = require("./PostList_Styles.bs.js");
var Js_null_undefined = require("rescript/lib/js/js_null_undefined.js");
var Hooks = require("react-relay/hooks");
var PostList_query_graphql = require("../../__generated__/rescript-relay/PostList_query_graphql.bs.js");
var RescriptRelay_Internal = require("rescript-relay/src/RescriptRelay_Internal.bs.js");

var getConnectionNodes = PostList_query_graphql.Utils.getConnectionNodes;

function use(fRef) {
  var data = Hooks.useFragment(PostList_query_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(PostList_query_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = Hooks.useFragment(PostList_query_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return PostList_query_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var PostListFragment = {
  getConnectionNodes: getConnectionNodes,
  Types: undefined,
  use: use,
  useOpt: useOpt
};

var deleteProp = ((newProps, key) => delete newProps[key]);

function getOrEmpty(str) {
  if (str !== undefined) {
    return " " + str;
  } else {
    return "";
  }
}

var styles = CssJs.style([
      CssJs.label("PostListWrapper"),
      CssJs.padding(Theme.Size.md)
    ]);

function make(props) {
  var className = styles + getOrEmpty(Caml_option.undefined_to_opt(props.className));
  var stylesObject = {
    className: className,
    ref: Caml_option.undefined_to_opt(props.innerRef)
  };
  var newProps = Object.assign({}, props, stylesObject);
  deleteProp(newProps, "innerRef");
  return React.createElement("div", newProps);
}

var PostListWrapper = {
  deleteProp: deleteProp,
  getOrEmpty: getOrEmpty,
  styles: styles,
  make: make
};

function PostList(Props) {
  var query = Props.query;
  var postList = use(query);
  var t = NextIntl.useTranslations(undefined);
  var match = React.useState(function () {
        return false;
      });
  var setIsModalOpen = match[1];
  var toggleModal = function (param) {
    return Curry._1(setIsModalOpen, (function (isOpen) {
                  return !isOpen;
                }));
  };
  return React.createElement("div", undefined, React.createElement(PostList_Styles.Header.make, {
                  children: null
                }, React.createElement($$Text.Title.make, {
                      children: Curry._1(t, "Posts")
                    }), React.createElement("div", undefined, React.createElement(AddPostModal.make, {
                          isOpen: match[0],
                          onClose: toggleModal,
                          onSave: (function (param) {
                              return Curry._1(setIsModalOpen, (function (isOpen) {
                                            return !isOpen;
                                          }));
                            }),
                          connections: [postList.postsConnection.__id]
                        }), React.createElement(Button.make, {
                          children: Render.s(Curry._1(t, "Add Post")),
                          onClick: toggleModal
                        }))), React.createElement(PostList_Styles.Container.make, {
                  children: Render.map(Curry._1(getConnectionNodes, postList.postsConnection), (function (thisPost) {
                          return React.createElement(SinglePost.make, {
                                      postItem: thisPost.fragmentRefs,
                                      key: thisPost.id
                                    });
                        }))
                }));
}

var make$1 = PostList;

exports.PostListFragment = PostListFragment;
exports.PostListWrapper = PostListWrapper;
exports.make = make$1;
/* styles Not a pure module */
