// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Theme = require("../../lib/Theme/Theme.bs.js");
var React = require("react");
var Render = require("../../lib/Render/Render.bs.js");
var Css = require("@emotion/css");
var AncestorCustom = require("../../lib/Theme/AncestorCustom.bs.js");

var styles = Css.css({
      margin: 0
    });

function Text$Title(Props) {
  var colorOpt = Props.color;
  var classNameOpt = Props.className;
  var tagOpt = Props.tag;
  var children = Props.children;
  var color = colorOpt !== undefined ? colorOpt : Theme.Colors.grayLight;
  var className = classNameOpt !== undefined ? classNameOpt : "";
  var tag = tagOpt !== undefined ? tagOpt : "h1";
  return React.createElement(AncestorCustom.Config.Base.make, {
              color: [AncestorCustom.xs({
                      NAME: "hex",
                      VAL: color
                    })],
              fontSize: [AncestorCustom.xs({
                      NAME: "px",
                      VAL: Theme.FontSize.lg
                    })],
              lineHeight: [AncestorCustom.xs({
                      NAME: "pct",
                      VAL: 80
                    })],
              tag: tag,
              className: className + styles,
              children: Render.s(children)
            });
}

var Title = {
  make: Text$Title
};

function Text$H3(Props) {
  var colorOpt = Props.color;
  var classNameOpt = Props.className;
  var tagOpt = Props.tag;
  var children = Props.children;
  var color = colorOpt !== undefined ? colorOpt : Theme.Colors.grayDark;
  var className = classNameOpt !== undefined ? classNameOpt : "";
  var tag = tagOpt !== undefined ? tagOpt : "h2";
  return React.createElement(AncestorCustom.Config.Base.make, {
              color: [AncestorCustom.xs({
                      NAME: "hex",
                      VAL: color
                    })],
              fontSize: [AncestorCustom.xs({
                      NAME: "px",
                      VAL: Theme.FontSize.md
                    })],
              lineHeight: [AncestorCustom.xs({
                      NAME: "pct",
                      VAL: 90
                    })],
              tag: tag,
              className: className + styles,
              children: Render.s(children)
            });
}

var H3 = {
  make: Text$H3
};

function Text$Body(Props) {
  var colorOpt = Props.color;
  var classNameOpt = Props.className;
  var tagOpt = Props.tag;
  var children = Props.children;
  var color = colorOpt !== undefined ? colorOpt : Theme.Colors.grayDark;
  var className = classNameOpt !== undefined ? classNameOpt : "";
  var tag = tagOpt !== undefined ? tagOpt : "p";
  return React.createElement(AncestorCustom.Config.Base.make, {
              color: [AncestorCustom.xs({
                      NAME: "hex",
                      VAL: color
                    })],
              fontSize: [AncestorCustom.xs({
                      NAME: "px",
                      VAL: Theme.FontSize.sm
                    })],
              tag: tag,
              className: className + styles,
              children: Render.s(children)
            });
}

var Body = {
  make: Text$Body
};

function Text$Small(Props) {
  var colorOpt = Props.color;
  var classNameOpt = Props.className;
  var tagOpt = Props.tag;
  var children = Props.children;
  var color = colorOpt !== undefined ? colorOpt : Theme.Colors.danger;
  var className = classNameOpt !== undefined ? classNameOpt : "";
  var tag = tagOpt !== undefined ? tagOpt : "p";
  return React.createElement(AncestorCustom.Config.Base.make, {
              color: [AncestorCustom.xs({
                      NAME: "hex",
                      VAL: color
                    })],
              fontSize: [AncestorCustom.xs({
                      NAME: "px",
                      VAL: Theme.FontSize.xs
                    })],
              tag: tag,
              className: className + styles,
              children: Render.s(children)
            });
}

var Small = {
  make: Text$Small
};

function Text$Button(Props) {
  var colorOpt = Props.color;
  var classNameOpt = Props.className;
  var tagOpt = Props.tag;
  var children = Props.children;
  var color = colorOpt !== undefined ? colorOpt : Theme.Colors.white;
  var className = classNameOpt !== undefined ? classNameOpt : "";
  var tag = tagOpt !== undefined ? tagOpt : "p";
  return React.createElement(AncestorCustom.Config.Base.make, {
              color: [AncestorCustom.xs({
                      NAME: "hex",
                      VAL: color
                    })],
              fontWeight: [AncestorCustom.xs("bold")],
              fontSize: [AncestorCustom.xs({
                      NAME: "px",
                      VAL: Theme.FontSize.sm
                    })],
              tag: tag,
              className: className + styles,
              children: children
            });
}

var Button = {
  make: Text$Button
};

exports.styles = styles;
exports.Title = Title;
exports.H3 = H3;
exports.Body = Body;
exports.Small = Small;
exports.Button = Button;
/* styles Not a pure module */
