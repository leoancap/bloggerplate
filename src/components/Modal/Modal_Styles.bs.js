// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var CssJs = require("bs-css-emotion/src/CssJs.bs.js");
var Theme = require("../../lib/Theme/Theme.bs.js");
var React = require("react");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Css_Js_Core = require("bs-css/src/Css_Js_Core.bs.js");

var deleteProp = ((newProps, key) => delete newProps[key]);

function getOrEmpty(str) {
  if (str !== undefined) {
    return " " + str;
  } else {
    return "";
  }
}

var styles = CssJs.style([
      CssJs.label("Backdrop"),
      CssJs.width({
            NAME: "vw",
            VAL: 100
          }),
      CssJs.height({
            NAME: "vh",
            VAL: 100
          }),
      CssJs.backgroundColor({
            NAME: "rgba",
            VAL: [
              0,
              0,
              0,
              {
                NAME: "num",
                VAL: 0.5
              }
            ]
          }),
      CssJs.unsafe("position", "fixed"),
      CssJs.display("flex"),
      CssJs.unsafe("justifyContent", "center"),
      CssJs.unsafe("alignItems", "center"),
      CssJs.top("zero"),
      CssJs.left("zero"),
      CssJs.unsafe("cursor", "pointer")
    ]);

function make(props) {
  var className = styles + getOrEmpty(Caml_option.undefined_to_opt(props.className));
  var stylesObject = {
    className: className,
    ref: Caml_option.undefined_to_opt(props.innerRef)
  };
  var newProps = Object.assign({}, props, stylesObject);
  deleteProp(newProps, "innerRef");
  return React.createElement("div", newProps);
}

var Backdrop = {
  deleteProp: deleteProp,
  getOrEmpty: getOrEmpty,
  styles: styles,
  make: make
};

var deleteProp$1 = ((newProps, key) => delete newProps[key]);

function getOrEmpty$1(str) {
  if (str !== undefined) {
    return " " + str;
  } else {
    return "";
  }
}

function styles$1(size, param) {
  return CssJs.style([
              CssJs.label("Container"),
              CssJs.backgroundColor(Theme.Colors.grayDark),
              CssJs.width(size),
              CssJs.height(size),
              CssJs.borderRadius(Theme.BorderRadius.xs),
              CssJs.boxShadows([Css_Js_Core.Shadow.box({
                          NAME: "pxFloat",
                          VAL: 0
                        }, {
                          NAME: "pxFloat",
                          VAL: 0
                        }, {
                          NAME: "pxFloat",
                          VAL: 5
                        }, {
                          NAME: "pxFloat",
                          VAL: 15
                        }, undefined, {
                          NAME: "rgba",
                          VAL: [
                            0,
                            0,
                            0,
                            {
                              NAME: "num",
                              VAL: 0.35
                            }
                          ]
                        })]),
              CssJs.display("flex"),
              CssJs.flexDirection("column"),
              CssJs.padding(Theme.Padding.md),
              CssJs.unsafe("cursor", "default"),
              CssJs.unsafe("zIndex", "1")
            ]);
}

function make$1(props) {
  var className = styles$1(props.size, undefined) + getOrEmpty$1(Caml_option.undefined_to_opt(props.className));
  var stylesObject = {
    className: className,
    ref: Caml_option.undefined_to_opt(props.innerRef)
  };
  var newProps = Object.assign({}, props, stylesObject);
  deleteProp$1(newProps, "size");
  deleteProp$1(newProps, "innerRef");
  return React.createElement("div", newProps);
}

var Container = {
  deleteProp: deleteProp$1,
  getOrEmpty: getOrEmpty$1,
  styles: styles$1,
  make: make$1
};

exports.Backdrop = Backdrop;
exports.Container = Container;
/* styles Not a pure module */
