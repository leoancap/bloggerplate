// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var React = require("react");
var PostList = require("../components/PostList/PostList.bs.js");
var RelayEnv = require("../lib/RelayEnv/RelayEnv.bs.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var RescriptRelay = require("rescript-relay/src/RescriptRelay.bs.js");
var RelayRuntime = require("relay-runtime");
var AncestorCustom = require("../lib/Theme/AncestorCustom.bs.js");
var React$1 = require("next-auth/react");
var Hooks = require("react-relay/hooks");
var IndexQuery_graphql = require("../__generated__/rescript-relay/IndexQuery_graphql.bs.js");
var RescriptRelay_Internal = require("rescript-relay/src/RescriptRelay_Internal.bs.js");

function use(variables, fetchPolicy, fetchKey, networkCacheConfig, param) {
  var data = Hooks.useLazyLoadQuery(IndexQuery_graphql.node, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(IndexQuery_graphql.Internal.convertVariables(variables)), {
        fetchKey: fetchKey,
        fetchPolicy: RescriptRelay.mapFetchPolicy(fetchPolicy),
        networkCacheConfig: networkCacheConfig
      });
  return RescriptRelay_Internal.internal_useConvertedValue(IndexQuery_graphql.Internal.convertResponse, data);
}

function useLoader(param) {
  var match = Hooks.useQueryLoader(IndexQuery_graphql.node);
  var loadQueryFn = match[1];
  var loadQuery = React.useMemo((function () {
          return function (param, param$1, param$2, param$3) {
            return Curry._2(loadQueryFn, IndexQuery_graphql.Internal.convertVariables(param), {
                        fetchPolicy: param$1,
                        networkCacheConfig: param$2
                      });
          };
        }), [loadQueryFn]);
  return [
          Caml_option.nullable_to_opt(match[0]),
          loadQuery,
          match[2]
        ];
}

function $$fetch(environment, variables, onResult, networkCacheConfig, fetchPolicy, param) {
  Hooks.fetchQuery(environment, IndexQuery_graphql.node, IndexQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).subscribe({
        next: (function (res) {
            return Curry._1(onResult, {
                        TAG: /* Ok */0,
                        _0: IndexQuery_graphql.Internal.convertResponse(res)
                      });
          }),
        error: (function (err) {
            return Curry._1(onResult, {
                        TAG: /* Error */1,
                        _0: err
                      });
          })
      });
  
}

function fetchPromised(environment, variables, networkCacheConfig, fetchPolicy, param) {
  var __x = Hooks.fetchQuery(environment, IndexQuery_graphql.node, IndexQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).toPromise();
  return __x.then(function (res) {
              return Promise.resolve(IndexQuery_graphql.Internal.convertResponse(res));
            });
}

function usePreloaded(queryRef, param) {
  var data = Hooks.usePreloadedQuery(IndexQuery_graphql.node, queryRef);
  return RescriptRelay_Internal.internal_useConvertedValue(IndexQuery_graphql.Internal.convertResponse, data);
}

function retain(environment, variables) {
  var operationDescriptor = RelayRuntime.createOperationDescriptor(IndexQuery_graphql.node, IndexQuery_graphql.Internal.convertVariables(variables));
  return environment.retain(operationDescriptor);
}

var Query = {
  Types: undefined,
  use: use,
  useLoader: useLoader,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  usePreloaded: usePreloaded,
  retain: retain
};

function Index$Main(Props) {
  var query = use(undefined, undefined, undefined, undefined, undefined);
  return React.createElement(PostList.make, {
              query: query.fragmentRefs
            });
}

var Main = {
  make: Index$Main
};

function $$default(param) {
  return React.createElement(AncestorCustom.Config.Box.make, {
              children: React.createElement(React.Suspense, {
                    children: React.createElement(Index$Main, {}),
                    fallback: "Loading...."
                  })
            });
}

function getServerSideProps(ctx) {
  var environment = RelayEnv.createEnvironment(undefined, undefined);
  var postsPromise = fetchPromised(environment, undefined, undefined, undefined, undefined);
  var userPromise = React$1.getSession(ctx);
  return Promise.all([
                postsPromise,
                userPromise
              ]).then(function (result) {
              var records = RelayEnv.getRecords(environment);
              return Promise.resolve({
                          props: {
                            session: result[1],
                            records: records
                          }
                        });
            });
}

exports.Query = Query;
exports.Main = Main;
exports.$$default = $$default;
exports.default = $$default;
exports.__esModule = true;
exports.getServerSideProps = getServerSideProps;
/* react Not a pure module */
